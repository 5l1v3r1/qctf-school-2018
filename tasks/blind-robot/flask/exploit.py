#!/usr/bin/python3

import sys
import requests

from PIL import Image
from argparse import ArgumentParser


DIRECTIONS = {
    'west':      (-1,  0), 
    'northwest': (-1, -1), 
    'north':     ( 0, -1), 
    'northeast': ( 1, -1),
    'east':      ( 1,  0),
    'southeast': ( 1,  1),
    'south':     ( 0,  1),
    'southwest': (-1,  1)
}


def resolve(url, level, x, y):
    response = requests.post(url, json={'level': level, 'x': x, 'y': y})
    try:
        return response.json()
    except:
        print(response.text)
        sys.exit()


def update_field(field, x, y, moves):
    for move in moves:
        dx, dy = DIRECTIONS.get(move)
        if 0 <= x + dx < len(field) and 0 <= y + dy < len(field[0]):
            field[x + dx][y + dy] = moves[move]


def calculate_size(url, level, verbose):
    if verbose:
        print('Calculating size of level %d...' % level)
    
    width = 0
    while 'message' not in resolve(url, level, width, 0):
        width += 1

    height = 0
    while 'message' not in resolve(url, level, 0, height):
        height += 1

    if verbose:
        print('Calculated! Size is (%d, %d)' % (width, height))

    return width, height


def download_level(url, level, level_size, verbose):
    if verbose:
        print('Downloading level %d...' % level)

    width, height = level_size
    field = [[False for y in range(height)] for x in range(width)]

    for x in range(1, width, 3):
        for y in range(1, height, 3):
            answer = resolve(url, level, x, y)
            field[x][y] = answer['type'] != 'empty'
            update_field(field, x, y, answer['moves'])

    if verbose:
        print('Downloaded.')
    
    return field


def draw_image(url, verbose=False):
    sizes = []
    while not 'message' in resolve(url, len(sizes), 0, 0):
        sizes.append(calculate_size(url, len(sizes), verbose))

    levels = [download_level(url, index, sizes[index], verbose) for index in range(len(sizes))]

    width = sum(w for (w, h) in sizes)
    height = max(h for (w, h) in sizes)

    img = Image.new('1', (width, height))

    offset = 0
    for i, level in enumerate(levels):
        w, h = sizes[i]
        
        for x in range(w):
            for y in range(h):
                img.putpixel((offset + x, y), 255 * level[x][y])
        
        offset += w

    return img


if __name__ == '__main__':
    url = 'http://0.0.0.0:30007/%s/resolve/'
    
    parser = ArgumentParser()
    parser.add_argument('--token', help='your team token', required=True)
    parser.add_argument('--verbose', help='be verbose', action='store_true')
    args = parser.parse_args()

    img = draw_image(url % args.token, args.verbose)
    img.show()
